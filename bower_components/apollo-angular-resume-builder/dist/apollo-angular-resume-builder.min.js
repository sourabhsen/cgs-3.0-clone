"use strict";angular.module("apollo-modal-sample-button",["ui.bootstrap"]).directive("apModalSampleButton",["$uibModal",function(){return{restrict:"AE",replace:!0,scope:{buttonText:"@",modalPath:"@",modalSize:"@"},template:'<div class="col button-col"><a role="button" href class="cta sample" ng-click="viewSample();">{{buttonText}}</a></div>',controller:["$scope","$uibModal",function(e,t){e.viewSample=function(){t.open({templateUrl:e.modalPath,size:e.modalSize||"lg"})}}]}}]),angular.module("apolloAngularResumeBuilder.InfoTipsContent",[]).constant("INFOTIPSCONTENT",{contact:{email:'<p><strong>Email</strong></p><p><strong>Tip:</strong>&nbsp;Make sure you&nbsp;use a professional-looking email address with your name like <a href="mailto:John.Smith@email.com">John.Smith@email.com</a>. Addresses such as <a href="mailto:Surfer82@email.com">Surfer82@email.com</a> or <a href="mailto:horselover3@email.com ">horselover3@email.com</a> are not considered professional.&nbsp;Make sure to check the inbox of the email address you list on a daily basis.</p>',websites:"<p><strong>Websites</strong></p><p><strong><strong>Tip:</strong></strong>&nbsp;Include any personal websites or online portfolios you have that are relevant to the job for which you are applying. You should <em>not</em> include a link to a personal Facebook page.&nbsp;Adding your LinkedIn address would be appropriate; however, make sure to create a short URL that looks similar to this: http://www.linkedin.com/in/myname</p>"},summary:{section:"<p><strong>Summary of Qualifications</strong></p><p><strong>Tip:</strong>&nbsp;This section is your chance to quickly tell the hiring manager why YOU are the right person for the job. We recommend working on this section last after you have added all of your information to your resume. The section should be 3-4 bullet points that best summarize your experience and qualifications. Focus on your achievements, recognitions and results that are relevant to the job description.</p><p><strong>Example:</strong>&nbsp;Here is an example of a great summary for an individual applying for a managerial sales position.</p><ul><li>5+ years of business experience including management responsibility of a four-person sales team.</li><li>Sold $400,000 in advertising space to large companies such as Google, AT&amp;T, and Best Buy.</li><li>Received &quot;Sales Leadership&quot; award for sharing best practices with the entire sales team.</li><li>Established mentorship program for new hires in the sales department.</li></ul>"},experience:{section:"<p><strong>Professional Experience</strong></p><p><strong>Tip:</strong>&nbsp;Don&#39;t have a lot of work experience? Here are two helpful hints:</p><ul><li>Move your Education section above Professional Experience to emphasize your education.</li><li>Expand on the work experience you do have, by adding relevant internships, part time work or volunteer work.</li></ul><p><strong>Tip:</strong>&nbsp;Have a lot of work experience? Try to make your resume concise and, if possible, fit within one page. Leave out older jobs and cut down on irrelevant information. &nbsp;A concise resume with highly relevant experience is better than a long resume with semi-relevant experience.&nbsp;</p><p><strong>Tip:</strong> Some human resources software systems select candidates by automated keyword searches.&nbsp; Look at the job description for your target role and identify any keywords that might be relevant. If those keywords apply to you, use those words throughout your resume.</p>",jobtitle:"<p><strong>Job Title</strong></p><p><strong>Tip:</strong> Some employers use unique titles for common jobs. Try to use common industry titles so that a hiring manager can quickly identify your position.</p><p><strong>Example:</strong> Use Sales Executive instead of Sales Ninja. If you do adjust your job title, make sure that it is truthful and that it does not inflate your experience level.</p>",achievements:"<p><strong>Achievement Bullets</strong></p><p><strong>Tip:</strong>&nbsp;Review the job description of the position you want to apply. Make sure that the achievements you include here relate to what the employer is seeking. Your most relevant achievements should appear first.</p><p><strong>Tip:</strong> Each achievement bullet should have two parts.</p><ul><li>What did you accomplish? (Start with an action verb, such as &quot;Managed&quot; or &quot;Increased&quot;)</li><li>How did it impact the organization? (Quantify results when possible)</li></ul><p><strong>Example:</strong>&nbsp; Here&#39;s a great example of four achievement bullets for a past retail store management job.&nbsp;</p><ul><li>Implemented employee incentive program that reduced employee turnover by 25%.</li><li>Increased customer satisfaction score by 30 points (out of 100) in one year through a series of training initiatives that focused on improving response time of staff.</li><li>Oversaw day-to-day operations including inventory management, sales reporting and expense tracking.</li><li>Improved store ranking from 25th to 3rd in the region in a two-year period.</li></ul>"},education:{degreeType:"<p><strong>DegreeType</strong></p><p><strong>Tip:</strong> Arts or Science are the two most common degree types. Make sure what you enter is what your diploma states.</p><p><strong>Example:</strong> Bachelor of <strong>Arts</strong> in English</p>",major:"<p><strong>Major/Emphasis</strong></p><p><strong>Tip:</strong> You can include multiple majors or emphases by separating them with commas.</p><p><strong>Example:</strong> Degree with a double major:&nbsp;Bachelor of Science in <strong>Communication, Journalism</strong></p>",gpa:"<p><strong>Additional Info</strong></p><p><strong>Tip:</strong> We recommend including your GPA if it is 3.0 or above</p>",details:"<p><strong>Education Details</strong></p><p><strong>Tip:</strong> If you are short on professional experience, consider adding a couple of your most relevant courses or projects that relate to your target position here.</p><p><strong>Example:</strong> Here is an example of what someone applying for a marketing job with little relevant experience might write:</p><p>Relevant coursework: Market Analysis, International Marketing and Product Pricing Structures</p>"},skills:{section:"<p><strong>Additional Information</strong></p><p><strong>Tip:</strong>&nbsp;Don&#39;t have a lot of experience?</p><ul><li>We recommend including up to four types of additional information in this section. Things like skills, volunteer work, languages, interests and hobbies will show that you have passions outside of work and help build your candidacy. This is an easy way to strengthen your resume and to make yourself more marketable to employers.&nbsp;</li></ul><p><strong>Tip:</strong>&nbsp;Have a lot of experience?</p><ul><li>Only include what is most relevant to your target job. Separate multiple items with commas (e.g. PowerPoint, Excel, Word).</li></ul>",certifications:"<p><strong>Certifications</strong></p><p><strong>Tip:</strong>&nbsp;Include the professional certifications you have that are relevant for the job you are seeking. Are you Sun Java certified? Add that here. Are you IBM certified database administrator? Add that here. We recommend adding any certification that you may have; remember to make sure they are relevant for the job you are seeking.&nbsp;</p><p><strong>Example:</strong>&nbsp;Here is a great example of a certification section for someone seeking a Database administrator position:</p><ul><li>Certifications: IBM certified Advanced database administrator</li></ul>",skills:"<p><strong>Skills</strong></p><p><strong>Tip:</strong>&nbsp;Include the professional skills you have that are relevant for the job you are seeking. Are you good with Microsoft Excel? Add that here. Are you a strong leader? Add that here. We recommend having 5-10 skills listed; remember to make sure they are relevant for the job you are seeking.&nbsp;</p><p><strong>Example:</strong>&nbsp;Here is a great example of a skills section for someone seeking an Administrative Assistant position:</p><ul><li>Skills: Word, Excel, PowerPoint, scheduling, professional communication, organization, 60+ wpm typing speed</li></ul>",awards:"<p><strong>Awards</strong></p><p><strong>Example:</strong>&nbsp;Here is a an example of a professional award that a person applying for a sales job might include:</p><p>Enterprise Sales Person of the Year - Over $250K in annual sales (2012)</p>",languages:"<p><strong>Languages</strong></p><p><strong>Tip:</strong>&nbsp;Knowing a foreign language sets you apart from other candidates. You don&#39;t have to be completely fluent to include a foreign language on your resume.&nbsp;</p><p><strong>Example:</strong></p><ul><li>Speak some Spanish? Say &quot;Basic oral proficiency in Spanish&quot;</li><li>Almost fluent in French? Say &quot;Proficiency in French&quot;</li><li>Completely fluent in German? Say &quot;Written and oral fluency in German&quot;</li></ul>",volunteerWork:"<p><strong>Volunteer Work</strong></p><p><strong>Tip:</strong>&nbsp;Volunteer work is an important experience to highlight, as it demonstrates your character. (Note: If you do not have a lot of work experience, you may choose to put your volunteer work into your Professional Experience section instead.)</p><p><strong>Example:</strong>&nbsp;Volunteer math tutor at Big Brothers &amp; Sisters (2008-2012).</p>",personalHobbies:"<p><strong>Personal Hobbies</strong></p><p><strong>Tip:</strong> Adding hobbies can help humanize your application. Avoid hobbies that could be considered controversial or could hurt your candidacy.</p>"},custom:{section:"<p><strong>Details</strong></p><p><strong>Tip:</strong>&nbsp;Use this custom section if the job/industry requires something extra.&nbsp;For instance, if you have special security clearance you might want to include that here.&nbsp;</p><p><strong>Example:</strong></p><ul><li>&quot;Active Government Security Clearance&quot;</li></ul>"}}),angular.module("resume-info-tips",["ui.bootstrap","ngSanitize"]).directive("resumeInfoTips",["$sce",function(e){function t(t){t.infoTipsPopover={content:e.trustAsHtml(t.content)||"Lorem ipsum dolor sit amet, consectetur adipiscing elit.",templateUrl:"/rb/templates/info-tips-popover.html"}}return{restrict:"E",replace:!0,scope:{content:"@"},templateUrl:"/rb/templates/info-tips.html",link:t}}]),function(e){e.module("apollo-sample-resumes",["resume-builder-tpls","apollo-modal-sample-button"]).directive("apSampleResumes",function(){return{restrict:"E",replace:!0,scope:{numCols:"="},templateUrl:"/rb/templates/sample-resumes.html",controller:["$cacheFactory",function(e){var t=[{path:"/rb/samples/modern-accountant-resume.html",name:"Accountant"},{path:"/rb/samples/modern-executiveassistent-resume.html",name:"Executive Assistant"},{path:"/rb/samples/modern-financial-analyst-resume.html",name:"Financial Analyst"},{path:"/rb/samples/classic-itmanagement-resume.html",name:"IT Manager"},{path:"/rb/samples/alternate-managment-professional-resume.html",name:"Management Professional"},{path:"/rb/samples/classic-counseling-resume.html",name:"Mental Health / Behavioral Counselor"},{path:"/rb/samples/alternate-nurse-resume.html",name:"Nurse"},{path:"/rb/samples/classic-security-professional-resume.html",name:"Security Professional"},{path:"/rb/samples/alterante-teacher-resume.html",name:"Teacher"}],r=function(t,r){if(t){var o,n,s,i=JSON.stringify(t);if(o=e.get("rbpartition"),o||(o=e("rbpartition")),n=o.get(i+r),JSON.stringify(n)===i)return n;s=[];for(var a=0;a<t.length;a+=r)s.push(t.slice(a,a+r));return o.put(i+r,s),s}},o=this,n=o.numCols||3;o.samples=r(t,n),o.colClass="col-md-"+Math.floor(12/Math.ceil(t.length/n))}],controllerAs:"srCtrl",bindToController:!0}})}(angular),function(e){e.module("apollo-preview-resume",["resume-model","apolloAngularResumeServices.config","ngSanitize"]).value("printHtmlWin",null).controller("ResumePreviewCtrl",["resumeModel","apolloAngularResumeServices.config","$sce",function(e,t,r){var o=this;o.resume=e.resume.resumeObj.resume,o.templates=e.templates,o.preferences=e.preferences,o.docId=e.resume.meta.id,o.tenant=t.tenant;var n=function(){o.template=e.resume.preferences.resumeTemplatePreference||"classic",o.templateUrl=r.trustAsResourceUrl("/rb/templates/"+o.template.toLowerCase()+"-preview.html"),o.htmlPreviewUrl="/api/resume-service/1/"+o.tenant+"/users/"+o.profileId+"/resume/"+o.docId+"/html?template="+o.template.toLowerCase()+"&download=true"};n(),o.updatePreference=function(t){return e.resume.preferences.resumeTemplatePreference=t,e.setPreference(e.resume.meta.id,{resumeTemplatePreference:t}).then(function(){n()})}}]).directive("apPreviewResume",function(){return{restrict:"E",replace:!0,scope:{profileId:"=pid",hideEdit:"=",edit:"&onEdit",cta:"="},templateUrl:"/rb/templates/preview-resume.html",controller:"ResumePreviewCtrl",controllerAs:"pvCtrl",bindToController:!0}}).directive("previewIframe",function(){return function(e,t,r){e.$watch(r.previewIframe,function(e){var r='<iframe title="Resume Preview" style="width:100%;height:100vh;padding:0;"  class="paper" src="'+e+'"></iframe>';t.find("iframe").remove(),t.append(r)})}}).directive("printResume",["$window","printHtmlWin",function(e,t){return{restrict:"A",scope:!0,link:function(r,o,n){o.on("click",function(){var r=n.printResume;t?(t.focus(),t.print()):(t=e.open(r),t.document.close(),t.focus(),t.onload=function(){t.print()},t.onbeforeunload=function(){t=null})})}}}])}(angular),function(e){e.module("apollo-list-resumes",["resume-model","ui.bootstrap","resume-builder-tpls","resume-utils","ngFileUpload"]).controller("ResumeListCtrl",["$templateCache","resumeModel","$uibModal","$q","$scope","resume-utils","$filter","$parse",function(t,r,o,n,s,i,a,l){function u(e){var t=[],o=a("filter")(r.resumeList,{label:e});return o.length?(o=o[0],t.push(r.get(o)),t.push(r.getPreferences(o.id)),t.push(r.getCountryList()),t.push(r.getStates()),n.all(t)):!1}function c(){var e;e=s.$new(),e.message="You have exceeded the maximum number of "+p+" resumes allowed.",o.open({templateUrl:"/rb/templates/resume-limit-error.html",backdrop:!0,scope:e})}var m=this,p=25;m.edit=m.edit||e.noop,m.preview=m.preview||e.noop,m.complete=m.complete||e.noop,m.selectionComplete=m.selectionComplete||e.noop,m.isKnown=m.isKnown||e.noop,m.fromScratch=m.fromScratch||e.noop,m.fromFS=m.fromFS||e.noop,s.model=r,s.hasMaxed=function(){return r.resumeList.length>=p},m.init=function(){var e;m.view=m.mini?"mini":"",e=n.when(m.isKnown()?[]:r.init(m.profileId)).finally(function(){s.$watchCollection("model",function(){m.resumeList=r.resumeList,m.size({size:r.resumeList?r.resumeList.length:0}),m.known=m.isKnown()})}),m.complete({promise:e})},m.viewEditor=function(t){var o,s=[];return m.isKnown()?((m.authenticate||e.noop)({callback:i.closureFunction(m.viewEditor,[t])}),void 0):(s.push(r.get(t)),s.push(r.getPreferences(t.id)),s.push(r.getCountryList()),s.push(r.getStates()),o=n.all(s),m.edit({promise:o}),void 0)},m.createDuplicate=function(t){var n,a;return m.isKnown()?((m.authenticate||e.noop)({callback:i.closureFunction(m.createDuplicate,[t])}),void 0):(a=s.$new(),a.submit=function(e){e?(a.inValid=!1,r.createDuplicate(t.id,e).then(function(){n.close()}).catch(function(e){a.inValid=!0,a.error=400===e.status?e.data.fieldErrors[0].errorMessage:"Oops..something went wrong. Please reload the page and try again."})):(a.error="Resume title cannot be left empty",a.inValid=!0)},n=o.open({templateUrl:"/rb/templates/dup-resume-confirmation.html",backdrop:!0,scope:a}),m.complete({promise:n.result}),void 0)},m.confirm=function(t){if(m.isKnown())return(m.authenticate||e.noop)({callback:i.closureFunction(m.confirm,[t])}),void 0;var n=s.$new();n.question="Do you really want to delete the resume?";var a=o.open({templateUrl:"/rb/templates/delete-resume-confirm.html",size:"sm",backdrop:!0,scope:n}).result.then(function(e){return e?r.delete(t.id):void 0});m.complete({promise:a})},m.viewPreview=function(t){var o,s=[];return m.isKnown()?((m.authenticate||e.noop)({callback:i.closureFunction(m.viewPreview,[t])}),void 0):(s.push(r.get(t)),s.push(r.getPreferences(t.id)),o=n.all(s),m.preview({promise:o}),void 0)},m.publish=function(t){if(m.isKnown())return(m.authenticate||e.noop)({callback:i.closureFunction(m.publish,[t])}),void 0;var o=r.setPreference(t.id,{searchable:"PRIVATE"===t.privacySetting}).then(r.getMetaInfo).then(function(){m.resumeList=r.resumeList});m.complete({promise:o})},m.fromScratch=function(){if(e.isFunction(m.isKnown)&&m.isKnown())return(m.authenticate||e.noop)({callback:m.fromScratch}),void 0;var t,n;n=s.$new(),n.submit=function(e,o){e.stopImmediatePropagation(),o?(n.inValid=!1,r.save({type:"new",name:o}).then(function(){return u(o)}).then(function(){t.close(r.resume.meta.id?"Success":"Fail")}).catch(function(){t.close(),c()})):(n.error="Resume title is required.",n.inValid=!0)},t=o.open({templateUrl:"/rb/templates/new-resume-confirmation.html",backdrop:!0,scope:n}),m.selectionComplete({promise:t.result})},m.fromFS=function(t){if(e.isFunction(m.isKnown)&&m.isKnown())return(m.authenticate||e.noop)({callback:i.closureFunction(m.fromScratch,[t])}),void 0;var o;s.uploadError=void 0,t&&t.length&&(o=r.save({type:"upload",data:t}).then(function(){return u(l("name")(t))}).then(function(){return"success"}).catch(function(e){c(),s.uploadError=e.data.fieldErrors[0].errorMessage}),m.selectionComplete({promise:o}))}}]).directive("apListResumes",function(){return{restrict:"E",replace:!0,scope:{profileId:"=pid",mini:"=",edit:"&onEdit",preview:"&onPreview",size:"&",complete:"&onComplete",selectionComplete:"&onSelectionComplete",isKnown:"&",authenticate:"&"},templateUrl:"/rb/templates/list-resumes.html",controller:"ResumeListCtrl",controllerAs:"lrCtrl",bindToController:!0}})}(angular),function(e){e.module("apollo-resume-editor",["ui.bootstrap","resume-builder-tpls","resume-model","apolloAngularResumeBuilder.InfoTipsContent","resume-info-tips","ngDragDrop","textAngular"]).directive("apResumeEditor",function(){return{restrict:"E",replace:!0,scope:{profileId:"=pid","delete":"&onDelete",preview:"&onPreview",save:"&onSave",fail:"&onFail"},templateUrl:"/rb/templates/editor.html",controller:["$scope","resumeModel","$log","$uibModal","apolloAngularResumeBuilder.config","INFOTIPSCONTENT","$document","$parse","$timeout","$q","$interval","$filter","$rootScope","$state","resume-utils","DEFAULT_COUNTRY",function(t,r,o,n,s,i,a,l,u,c,m,p,d,f,h,g){var v,b,y=this,w={summary:"summary",experience:"experience",education:"education",skills:"additional info"},k={awards:"awards",certifications:"certifications",personalHobbies:"hobbies",languages:"languages",skills:"skills",volunteerWork:"volunteer"};y.trans={skills_subsection:"skills",skills:"skills",awards:"awards",certifications:"certifications",languages:"languages",hobbies:"personalHobbies",volunteer:"volunteerWork"},y.isReady=e.isObject(r.resume),y.isDirty=!1,y.defaultCountry=g,y.InfoTipsContent=e.extend({},i),v=e.copy(r.resume),y.init=function(){y.resumeMeta=v.resumeObj,r.updateDefaultValues(v.resumeObj),y.resume=v.resumeObj.resume,y.countries=v.countries,y.states=v.states,y.skills=e.copy(h.sortByValue(k));var o=y.resume.skills;for(var n in o)e.isArray(o[n])||(o[n]=o[n].length>0?o[n].split(","):[]);y.sections=e.copy(w);var s,i,a=y.resume.sections;a.forEach(function(t){s=t.type.toLowerCase(),w[s]&&(delete y.sections[s],"skills"===s.toLowerCase()&&e.isArray(t.subSections)&&t.subSections.forEach(function(e){i=e.type.toLowerCase(),k[y.trans[i]]&&delete y.skills[y.trans[i]]}))}),y.transformAllDates(y.resume,!1),t.autoSave(),t.$on("$destroy",function(){m.cancel(b),u()}),t.$watch(function(){return y.resume.sections},function(t,r){e.equals(t,r)||(y.isDirty=!0)},!0);var l=!1,u=d.$on("$stateChangeStart",function(o,n,s,i,a){var u=e.copy(v);t.transformSkillsArray2Str(u.resumeObj.resume.skills),y.transformAllDates(u.resumeObj.resume,!1,!0),r.resume.resumeObj&&y.isDirty&&!l&&"resumeBuilder"===a.toolId&&"editor"===a.viewId&&(o.preventDefault(),y.saveResume().then(function(){l=!0,f.go(n,s)}))})},y.transformAllDates=function(e,t){l("experience.jobs")(e)&&y.transformDate(e.experience.jobs,"startDate","endDate",t),l("education.schools")(e)&&y.transformDate(e.education.schools,"startDate","completionDate",t)},y.transformDate=function(e,t,r,o){e.forEach(function(e){var n;e[t]&&(o?e[t]=e[t].toISOString():(n=new Date(e[t]),n.setTime(n.getTime()+6e4*n.getTimezoneOffset()),e[t]=n)),e[r]&&(o?e[r]=e[r]?e[r].toISOString():e[r]:(n=new Date(e[r]),n.setTime(n.getTime()+6e4*n.getTimezoneOffset()),e[r]=n))})},y.confirmation=function(e,r,o){var s="Do you really want to delete {{?}} from resume?";s=s.replace("{{?}}",o);var i=t.$new();i.question=s,n.open({templateUrl:"/rb/templates/delete-resume-confirm.html",size:"sm",backdrop:!0,scope:i}).result.then(function(t){return t?e.apply(y,r):void 0})},y.markDirty=function(e,t){var o=l(r.resume);return y.isDirty||void 0!==t&&o(t)===e||(y.isDirty=!0),!0},y.deleteSection=function(t,r){y.sections[t]=w[t],"skills"!==t?y.resume[t][r]=[]:(Object.keys(y.resume[t]).map(function(e){y.resume[t][e]=[]}),y.skills=e.copy(k)),y.resume.sections=y.resume.sections.filter(function(e){return e.type.toLowerCase()!==t}),y.isDirty=!0},y.addSection=t.addSection=function(e){t.resumeValidated=!1,t.formStatus="",delete y.sections[e],y.resume.sections.push({type:e.toUpperCase(),subSections:[]})},y.deleteCustomSection=function(e){y.resume.additionalSections=y.resume.additionalSections.filter(function(t){return t.id!==e}),y.resume.sections=y.resume.sections.filter(function(t){return t.id!==e}),y.isDirty=!0},y.addCustomSection=function(){var t=Math.floor(100*Math.random())+1;y.resume.sections.push({type:"CUSTOM_SECTION",id:t}),e.isUndefined(y.resume.additionalSections)&&(y.resume.additionalSections=[]),y.resume.additionalSections.push({id:t,section:"CUSTOM SECTION",content:""})},y.addSubSection=function(t,r){var o,n={jobs:{employer:"",address:{city:"",state:"",country:g},startDate:"",endDate:"",isCurrent:!1,title:"",description:"",id:void 0},schools:{details:"",isAttending:!1,completionDate:"",startDate:"",gpa:{max:4,value:""},major:"",qualificationLevel:"",degreeType:"",qualification:"",address:{city:"",state:"",country:g},institution:"",id:void 0}};e.isUndefined(y.resume[t][r])&&(y.resume[t][r]=[]),o=y.resume[t][r],o.push(e.copy(n[r])),o[o.length-1].id=Math.floor(100*Math.random())+1,y.resume.sections=y.resume.sections.map(function(r){return r.type.toLowerCase()===t&&(e.isArray(r.subSections)||(r.subSections=[]),r.subSections.push({type:r.type.toUpperCase()+"_SUBSECTION",id:o[o.length-1].id})),r})},y.deleteSubSection=function(e,t,r){var o=y.resume[e][t].splice(r,1),n=y.resume.sections.reduce(function(t,r){return t.type===e.toUpperCase()?t:r},{});n.subSections=n.subSections.filter(function(e){return e.id!==o[0].id}),y.isDirty=!0},y.addSkillsSubSection=function(t){delete y.skills[y.trans[t]],y.resume.sections=y.resume.sections.map(function(r){return"skills"===r.type.toLowerCase()&&(e.isArray(r.subSections)||(r.subSections=[]),r.subSections.push({type:"skills"===t?t.toUpperCase()+"_SUBSECTION":t.toUpperCase()})),r}),y.resume.skills[y.trans[t]]=[]},y.deleteSkillsSubSection=function(t){t=t.toLowerCase(),y.skills[y.trans[t]]=k[y.trans[t]],y.skills=e.copy(h.sortByValue(y.skills)),y.resume.skills[y.trans[t]]=[],y.resume.sections.every(function(e){return"skills"===e.type.toLowerCase()?(e.subSections=e.subSections.filter(function(e){return e.type.toLowerCase()!==t}),!1):!0}),y.isDirty=!0},y.deleteSkillInput=function(e,t){return y.isDirty=!0,e.splice(t,1)},t.addInfoObj={},y.addSkillInput=function(e,r,o,n){""===e||13!==n.keyCode&&9!==n.keyCode||(r.push(e),t.addInfoObj[o]="",y.isDirty=!0)},y.addSkillInputOnBlur=function(e,r,o){""!==e&&(r.push(e),t.addInfoObj[o]="",y.isDirty=!0)},y.download=function(e){var r;return r=c.defer(),y.doAutoSave=!1,y.isDirty||t.resumeEditor.$dirty?y.saveResume().then(function(){m.cancel(b),r.resolve()}):r.resolve(),r.promise.finally(function(){y.preview({promise:void 0,hideEdit:!0,cta:e})})},t.isSaved=!0,y.saveResume=function(){var o,n;return r.resume=e.copy(v),t.transformSkillsArray2Str(r.resume.resumeObj.resume.skills),y.transformAllDates(r.resume.resumeObj.resume,!0),n=c.defer(),m.cancel(b),o=r.update(),o.then(function(){t.saveConfirmMsg="Resume saved at "+p("date")(new Date,"shortTime"),y.isDirty=!1,t.resumeEditor.$setPristine()}).catch(function(){t.isSaved=!0,t.validationError="Sorry, there was problem saving your resume at this time please try again later."}).finally(function(){y.transformAllDates(r.resume.resumeObj.resume),t.autoSave(),n.resolve()}),y.save({promise:o}),n.promise},t.autoSave=function(){b=m(function(){if(y.isDirty||t.resumeEditor.$dirty){var o=e.copy(v);t.transformSkillsArray2Str(o.resumeObj.resume.skills),r.resume=o,y.transformAllDates(r.resume.resumeObj.resume,!0),m.cancel(b),r.update().then(function(){y.isDirty=!1,t.resumeEditor.$setPristine(),t.saveConfirmMsg="Resume saved at "+p("date")(new Date,"shortTime"),y.transformAllDates(r.resume.resumeObj.resume),t.autoSave()})}},1e4)},t.transformSkillsArray2Str=function(e){var t;for(t in e)"skills"!==t&&(e[t]=e[t].join(","))},y.updateDate=function(e,t,r){e&&(t[r]="")},t.dateConfig={today:new Date,dateOptions:{startingDay:1,showWeeks:!1,minMode:"month"}},y.validateDate=function(t,r){var o,n,s=new Date;if(o=t.start,n=t.end,!e.isDate(o)||!e.isDate(n)&&!t.isCurrent)return"Please enter the date in specified format";if(e.isDate(o)&&o.getTime()>s.getTime())return"You cannot pick a date in future";if(!t.isCurrent){if(e.isDate(n)&&n.getTime()>s.getTime())return"You cannot pick a date in future";if(e.isDate(n)&&e.isDate(o)&&n.getTime()<=o.getTime())return"End date cannot fall before start date"}r&&(y.isDirty=!0)},y.isValidGPA=function(e){return e?/^\d{1}\.\d{1}$/.test(e)?(e=parseFloat(e),e>4?"GPA cannot exceed 4.0":(y.isDirty=!0,void 0)):"Invalid GPA":void 0},y.deleteResume=function(){var e;e=r.delete(r.resume.meta.id).then(function(){y.isDirty=!1}),y.delete({promise:e})},y.isDisabled=function(e,t){return e&&!!e[t]},y.test=function(){console.log("TEST")},y.emptyState=function(e){e.country!==g&&(e.state="")},y.isReady?y.init():(y.fail||e.noop)()}],controllerAs:"editorCtrl",bindToController:!0}})}(angular),function(e){e.module("apollo-create-resume",["apolloAngularResumeBuilder.config","resume-model","ui.bootstrap","resume-builder-tpls","ngFileUpload","resume-utils"]).controller("CreateResumeCtrl",["resumeModel","$uibModal","$scope","$filter","$q","$parse","resume-utils",function(t,r,o,n,s,i,a){function l(e){var r=[],o=n("filter")(t.resumeList,{label:e});return o.length?(o=o[0],r.push(t.get(o)),r.push(t.getPreferences(o.id)),r.push(t.getCountryList()),r.push(t.getStates()),s.all(r)):!1}var u=this;u.complete=u.complete||e.noop,t.init(u.profileId),o.resumeList=t.resumeList,u.fromScratch=function(){if(e.isFunction(u.isKnown)&&u.isKnown())return(u.authenticate||e.noop)({callback:u.fromScratch}),void 0;var n,s;s=o.$new(),t.showList=!1,s.submit=function(e,r){e.stopImmediatePropagation(),r?(s.inValid=!1,t.save({type:"new",name:r}).then(function(){return l(r)}).then(function(){n.close(t.resume.meta.id?"Success":"Fail")}).catch(function(e){s.inValid=!0,s.error=400===e.status?e.data.fieldErrors[0].errorMessage:"Oops..something went wrong. Please reload the page and try again."})):(s.error="Resume title is required.",s.inValid=!0)},n=r.open({templateUrl:"/rb/templates/new-resume-confirmation.html",backdrop:!0,scope:s}),u.complete({promise:n.result})},u.fromFS=function(r){if(e.isFunction(u.isKnown)&&u.isKnown())return(u.authenticate||e.noop)({callback:a.closureFunction(u.fromScratch,[r])}),void 0;var n;o.uploadError=void 0,r&&r.length&&(n=t.save({type:"upload",data:r}).then(function(){return l(i("name")(r))}).then(function(){return"success"}).catch(function(e){o.uploadError=e.data.fieldErrors[0].errorMessage}),u.complete({promise:n}))},u.fromLinkedIn=function(){return t.save({type:"import"})}}]).directive("apCreateResume",function(){return{restrict:"E",replace:!0,scope:{profileId:"=pid",complete:"&onComplete",isKnown:"&",authenticate:"&"},templateUrl:"/rb/templates/create-resume.html",controller:"CreateResumeCtrl",controllerAs:"crCtrl",bindToController:!0}})}(angular),function(e){e.module("resume-utils",[]).factory("resume-utils",[function(){return{closureFunction:function(t,r){return function(){e.isArray(r)&&r.length?t.apply({},r):t()}},sortByValue:function(e){var t=Object.keys(e).map(function(t){return[t,e[t]]});t.sort(function(e,t){return e[1]<t[1]?-1:e[1]>t[1]?1:0});var r={};return t.forEach(function(e){r[e[0]]=e[1]}),r}}}])}(angular),function(e){e.module("resume-model",["apolloAngularResumeServices.resume"]).constant("DEFAULT_COUNTRY","United States").factory("resumeModel",["$resumeservice","$q","$parse","$sce","$window","DEFAULT_COUNTRY",function(t,r,o,n,s,i){var a,l,u={},c=!1;return u.init=function(e){return c?l:(a=e,c=!0,l=u.getMetaInfo().finally(function(){c=!1}))},u.getMetaInfo=function(){return t.list(a).then(function(e){u.resumeList=o("data.items")(e)})},u.get=function(e){return u.resume={meta:e},t.get({profileId:a,docId:u.resume.meta.id}).then(function(e){u.resume.resumeObj=e.data})},u.updateDefaultValues=function(t){var r,o;t.resume.contact.postalAddress.country||(t.resume.contact.postalAddress.country=i),t.resume.experience&&t.resume.experience.jobs&&(r=t.resume.experience.jobs,e.forEach(r,function(e){e.address.country||(e.address.country=i)})),t.resume.education&&t.resume.education.schools&&(o=t.resume.education.schools,e.forEach(o,function(e){e.address.country||(e.address.country=i)}))},u.getPreferences=function(e){return t.getPreferences({profileId:a,docId:e}).then(function(e){u.resume.preferences=e.data})},u.setPreference=function(e,r){return t.setPreference({profileId:a,docId:e,payload:r})},u.getTemplates=function(){var e=this;return t.getTemplates().then(function(t){e.templates=t.data.items})},u.setTemplate=function(){return this.setPreference(u.resume.meta,{resumeTemplatePreference:this.preferences.resumeTemplatePreference})},u.save=function(e){var r,o;return o=this,r="upload"===e.type?t.upload(a,e.data):"import"===e.type?t.importLinkedIn(a):t.create(a,{name:e.name}),r.then(u.getMetaInfo)},u.delete=function(e){return e?t.delete({profileId:a,docId:e}).then(u.getMetaInfo):r.reject("Document id required to delete resume!")},u.update=function(){var e=this;return t.update({profileId:a,docId:this.resume.meta.id,data:this.resume.resumeObj}).then(function(t){e.resume.resumeObj=t.data})},u.updateResumeTitle=function(e){var r=this;return t.update({profileId:a,docId:this.resume.meta.id,data:{name:e,resume:{},primaryInd:"Y",status:"COMPLETE"}}).then(function(e){r.resume.resumeObj=e.data}).then(u.getMetaInfo)},u.getPreviewUrl=function(){return this.resume.preferences.previewUrl=t.previewUrl({profileId:a,docId:this.resume.meta.id,template:this.resume.preferences.resumeTemplatePreference||"classic"}),this.resume.preferences.previewUrl},u.getPreview=function(){var e,r;r=this,e=t.preview({profileId:a,dociId:this.meta.id,data:this.preferences.resumeTemplatePreference}),e.then(function(e){var t;t=s.document.createElement("html"),t.innerHTML=e.data,r.content=t.querySelector("body").innerHTML,r.content=r.content.replace(/\s+(<)/g,"$1").replace(/(>)\s+/g,"$1").replace(/\s+–\s+/g," - "),r.content=n.trustAsHtml(r.content)})},u.getTemplates(),u.createDuplicate=function(e,r){return t.duplicate({profileId:a,docId:e,data:{name:r,primaryInd:"N"}}).then(u.getMetaInfo)},u.reset=function(){delete u.resumeList,delete u.resume},u.getCountryList=function(){return t.getCountryList().then(function(e){u.resume.countries=e.data})},u.getStates=function(){return t.getStates().then(function(e){u.resume.states=e.data.result.data})},u}])}(angular),function(e){e.module("apolloAngularResumeBuilder.config",[]).value("apolloAngularResumeBuilder.config",{debug:!0,editorLayout:!1}),e.module("apolloAngularResumeBuilder",["apolloAngularResumeBuilder.config","apollo-sample-resumes","apollo-create-resume","apollo-list-resumes","apollo-resume-editor","apollo-preview-resume","cgBusy","resume-utils"]).run(["$templateCache",function(e){e.put("/rb/templates/dup-resume-confirmation.html",'<div class="container-fluid resume-builder-modal" id="duplicate-resume-modal" role="dialog" aria-label="New resume title" tabindex="0"><div class="row"><form class="col-md-12" ng-submit="submit(rlabel)"><div class="form-group"><label for="resume-title" tabindex="-1">Please enter new resume title:</label><input id="resume-title" type="text" placeholder="enter the resume title" class="form-control" ng-model="rlabel" maxlength="75" autofocus></div><div role="alert" class="form-group"><small class="col-md-12 alert alert-danger" ng-show="inValid">{{error}}</small></div></form><div class="form-group"><div class="col-md-6 text-left"><button class="btn btn-primary" ng-click="submit(rlabel)">Create</button></div><div class="col-md-6 text-right"> <a href="" ng-click="$close();">Cancel</a></div></div></div></div>'),e.put("/rb/templates/delete-resume-confirm.html",'<div class="container-fluid resume-builder-modal" id="delete-resume-confirmation" role="alertdialog" tabindex="0"><div class="row"><div class="col-md-12 text-center"><p>{{question}}</p><div class="row"><div class="col-md-6 text-center"><button class="btn btn-primary" ng-click="$close(true);">Yes</button></div><div class="col-md-6"> <a href="" ng-click="$close();">Cancel</a></div></div></div>'),e.put("/rb/templates/new-resume-confirmation.html",'<div class="container-fluid resume-builder-modal" id="new-resume-modal" role="dialog" aria-label="New resume title" tabindex="0"><div class="row"><form class="col-md-12" ng-submit="submit($event, rlabel)"><div class="form-group"><label for="resume-title" tabindex="-1">Please enter resume title:</label><input id="resume-title" type="text" placeholder="enter the resume title" class="form-control" ng-model="rlabel" maxlength="75" autofocus></div><div role="alert" class="form-group"><small class="col-md-12 alert alert-danger" ng-show="inValid">{{error}}</small></div></form><div class="form-group"><div class="col-md-6 text-left"><button class="btn btn-primary" ng-click="submit($event, rlabel)">Create</button></div><div class="col-md-6 text-right"> <a href="" ng-click="$close();">Cancel</a></div></div></div></div>'),e.put("/rb/templates/confirm-navigation-away.html",'<div class="container-fluid resume-builder-modal" role="alertdialog" tabindex="0"><div class="row"><div class="col-md-12 text-center"><p>You are about to leave resume builder, make sure you have saved your work.</p><p>Are you sure you want to leave this page?</p><div class="row"><div class="col-md-6 text-right"><button class="btn btn-primary" ng-click="$close(true);">Stay on this Page</button></div><div class="col-md-6 text-left"><button class="btn btn-primary" ng-click="$close(false);">Leave this Page</button></div></div></div>'),e.put("/rb/templates/resume-limit-error.html",'<div class="container-fluid resume-builder-modal" id="resume-maxlimit-error" role="alertdialog" tabindex="0"><div class="row"><div class="col-md-12"><p>{{message}}</p><div class="row flatten"><div class="col-md-6"><button class="btn btn-primary" ng-click="$close(true);">Okay</button></div><div class="col-md-6"></div></div></div>')
}])}(angular);
//# sourceMappingURL=data:application/json;base64,
